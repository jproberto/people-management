version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  # ============= BANCO DE DADOS =============
  postgres:
    image: postgres:15-alpine
    container_name: people-management-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: people_management
      POSTGRES_USER: people_admin
      POSTGRES_PASSWORD: people_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U people_admin -d people_management"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============= APLICAÇÃO SPRING BOOT =============
  people-management-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: people-management-app
    ports:
      - "8080:8080"
    environment:
      # Perfil Spring Boot
      SPRING_PROFILES_ACTIVE: docker
      
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/people_management
      SPRING_DATASOURCE_USERNAME: people_admin
      SPRING_DATASOURCE_PASSWORD: people_password_2024
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      
      # JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: none
      SPRING_JPA_SHOW_SQL: false
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
      
      # Flyway
      SPRING_FLYWAY_ENABLED: true
      SPRING_FLYWAY_BASELINE_ON_MIGRATE: true
      SPRING_FLYWAY_VALIDATE_ON_MIGRATE: true
      
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      
      # Logging
      LOGGING_LEVEL_COM_ITAU_HR_PEOPLE_MANAGEMENT: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: WARN
      LOGGING_LEVEL_ORG_HIBERNATE: WARN
      
      # Management/Actuator
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
      
      # JVM Options
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport"
    volumes:
      - app-logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============= INFRAESTRUTURA EXISTENTE =============
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - app-network

  # Loki: Sistema de agregação de logs
  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - P:/workspace/Loki:/tmp/loki
    networks:
      - app-network
    
  # Promtail: Agente para coletar logs e enviar para o Loki
  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    command: -config.file=/etc/promtail/config.yaml
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - P:/workspace/Java/people-management/logs:/var/log/app:ro
      - app-logs:/var/log/docker-app:ro  # Logs da app Docker
    networks:
      - app-network
    depends_on:
      - loki

  # Grafana: Interface de visualização
  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    networks:
      - app-network
    depends_on:
      - loki

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.0 
    container_name: kafdrop
    ports:
      - "9000:9000" 
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - app-network
  
volumes:
  grafana-data:
  postgres-data:    # Volume para persistir dados do PostgreSQL
  app-logs:         # Volume para logs da aplicação